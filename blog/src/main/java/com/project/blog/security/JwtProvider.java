package com.project.blog.security;

import java.security.Key;
import java.util.Date;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;


@Service
public class JwtProvider {
	
	private Key key ;

    public static final long EXPIRATION_TIME = 24 * 60 * 60 * 1000;

   
     
    
	@PostConstruct
	public void init() {
		key = Keys.secretKeyFor(SignatureAlgorithm.HS256) ;
	}
	
	public String generateToken(Authentication authentication) {
		User pricipal = (User)authentication.getPrincipal() ;

		return Jwts.builder().setSubject(pricipal.getUsername()).setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(key)
                .compact();
	}
	
	
    public boolean validateToken(String jwt) {
        Jwts.parser().setSigningKey(key).parseClaimsJws(jwt); /*compare the token from the header request with the token generated by the key  */
        return true;
    }



    public String getUsernameFromJWT(String token) {
        Claims claims = Jwts.parser()
                .setSigningKey(key)
                .parseClaimsJws(token)
                .getBody();

        return claims.getSubject();
    }
	
}
